---
import { getCollection } from 'astro:content';
import { Icon } from 'astro-icon/components';
import Item from '~/components/blog/ListItem.astro';
import type { Post } from '~/types';

export interface Props {
  posts: Array<Post>;
  showSearch?: boolean;
  showFilters?: boolean;
  postsPerPage?: number;
}

const { posts, showSearch = true, showFilters = true, postsPerPage = 10 } = Astro.props;

// Get unique categories and tags for filters
const allPosts = await getCollection('post', (entry) => {
  return entry.data.draft !== true;
});

const categories = [...new Set(allPosts.map((p) => p.data.category).filter(Boolean))].sort();
const tags = [...new Set(allPosts.flatMap((p) => p.data.tags || []))].sort();

// Prepare search data
const searchData = allPosts.map((post) => ({
  slug: post.slug,
  title: post.data.title,
  excerpt: post.data.excerpt || '',
  category: post.data.category || '',
  tags: post.data.tags || [],
  publishDate: post.data.publishDate,
  image: post.data.image,
}));
---

<div class="searchable-blog-list">
  {
    (showSearch || showFilters) && (
      <div class="search-controls mb-8 space-y-4">
        {showSearch && (
          <div class="relative">
            <Icon
              name="tabler:search"
              class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400"
            />
            <input
              type="text"
              id="blogSearch"
              placeholder="Search posts by title or content..."
              class="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white"
            />
          </div>
        )}

        {showFilters && (
          <div class="flex flex-wrap gap-4">
            <select
              id="categoryFilter"
              class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded dark:bg-gray-800 dark:text-white"
            >
              <option value="">All Categories</option>
              {categories.map((category) => (
                <option value={category}>{category}</option>
              ))}
            </select>

            <select
              id="sortBy"
              class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded dark:bg-gray-800 dark:text-white"
            >
              <option value="date">Sort by Date</option>
              <option value="title">Sort by Title</option>
              <option value="relevance">Sort by Relevance</option>
            </select>

            <button
              id="clearFilters"
              class="px-3 py-2 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors"
            >
              Clear Filters
            </button>
          </div>
        )}

        <div id="resultsCount" class="text-sm text-gray-600 dark:text-gray-400">
          Showing {posts.length} {posts.length === 1 ? 'post' : 'posts'}
        </div>
      </div>
    )
  }

  <!-- Pagination Controls -->
  <div id="paginationControls" class="flex justify-center items-center space-x-2 mb-8 hidden">
    <button
      id="firstPage"
      class="px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      First
    </button>
    <button
      id="prevPage"
      class="px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      Previous
    </button>

    <div id="pageNumbers" class="flex space-x-1">
      <!-- Page numbers will be inserted here -->
    </div>

    <button
      id="nextPage"
      class="px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      Next
    </button>
    <button
      id="lastPage"
      class="px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      Last
    </button>
  </div>

  <div id="blogResults">
    <ul id="postsList" style="display: flex; flex-direction: column;">
      {
        posts.map((post) => (
          <li
            class="post-item mb-12 md:mb-20"
            data-search-content={JSON.stringify({
              title: post.title.toLowerCase(),
              excerpt: (post.excerpt || '').toLowerCase(),
              category: post.category || '',
              tags: post.tags || [],
              slug: post.slug,
              publishDate: post.publishDate,
            })}
          >
            <Item post={post} />
          </li>
        ))
      }
    </ul>

    <div id="noResults" class="text-center py-12 hidden">
      <Icon name="tabler:search-off" class="w-16 h-16 mx-auto text-gray-400 mb-4" />
      <p class="text-lg text-gray-600 dark:text-gray-400">No posts found matching your search criteria.</p>
      <button
        id="resetSearch"
        class="mt-4 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors"
      >
        Show all posts
      </button>
    </div>
  </div>
</div>

<script define:vars={{ postsPerPage }}>
  function initSearchableBlogList() {
    const searchInput = document.getElementById('blogSearch');
    const categoryFilter = document.getElementById('categoryFilter');
    const sortBy = document.getElementById('sortBy');
    const clearFilters = document.getElementById('clearFilters');
    const resultsCount = document.getElementById('resultsCount');
    const postsList = document.getElementById('postsList');
    const noResults = document.getElementById('noResults');
    const resetSearch = document.getElementById('resetSearch');

    // Pagination elements
    const paginationControls = document.getElementById('paginationControls');
    const firstPage = document.getElementById('firstPage');
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    const lastPage = document.getElementById('lastPage');
    const pageNumbers = document.getElementById('pageNumbers');

    if (!postsList) return; // No posts to search

    const allPosts = Array.from(postsList.querySelectorAll('.post-item'));
    let filteredPosts = [...allPosts];
    let currentPage = 1;
    const POSTS_PER_PAGE = postsPerPage;

    function performSearch() {
      const query = searchInput?.value.toLowerCase() || '';
      const selectedCategory = categoryFilter?.value || '';
      const sortValue = sortBy?.value || 'date';

      // Filter posts
      filteredPosts = allPosts.filter((postElement) => {
        const searchData = JSON.parse(postElement.dataset.searchContent || '{}');

        // Text search
        const textMatch =
          !query ||
          searchData.title.includes(query) ||
          searchData.excerpt.includes(query) ||
          (searchData.tags || []).some((tag) => tag.toLowerCase().includes(query));

        // Category filter
        const categoryMatch = !selectedCategory || searchData.category === selectedCategory;

        return textMatch && categoryMatch;
      });

      // Sort posts
      if (sortValue === 'title') {
        filteredPosts.sort((a, b) => {
          const titleA = JSON.parse(a.dataset.searchContent || '{}').title || '';
          const titleB = JSON.parse(b.dataset.searchContent || '{}').title || '';
          return titleA.localeCompare(titleB);
        });
      } else if (sortValue === 'relevance' && query) {
        filteredPosts.sort((a, b) => {
          const dataA = JSON.parse(a.dataset.searchContent || '{}');
          const dataB = JSON.parse(b.dataset.searchContent || '{}');
          const scoreA = dataA.title.includes(query) ? 2 : 1;
          const scoreB = dataB.title.includes(query) ? 2 : 1;
          return scoreB - scoreA;
        });
      } else if (sortValue === 'date') {
        // Sort by date (newest first)
        filteredPosts.sort((a, b) => {
          const dateA = new Date(JSON.parse(a.dataset.searchContent || '{}').publishDate || 0);
          const dateB = new Date(JSON.parse(b.dataset.searchContent || '{}').publishDate || 0);
          return dateB.getTime() - dateA.getTime();
        });
      }

      // Reset to first page when search changes
      currentPage = 1;
      renderResults();
    }

    function renderResults() {
      // Hide all posts first
      allPosts.forEach((post) => {
        post.style.display = 'none';
      });

      if (filteredPosts.length === 0) {
        noResults?.classList.remove('hidden');
        paginationControls?.classList.add('hidden');
        if (resultsCount) resultsCount.textContent = 'No posts found';
        return;
      }

      noResults?.classList.add('hidden');

      // Calculate pagination
      const totalPages = Math.ceil(filteredPosts.length / POSTS_PER_PAGE);
      const startIndex = (currentPage - 1) * POSTS_PER_PAGE;
      const endIndex = startIndex + POSTS_PER_PAGE;
      const currentPagePosts = filteredPosts.slice(startIndex, endIndex);

      // Show current page posts
      currentPagePosts.forEach((post, index) => {
        post.style.display = 'block';
        post.style.order = index.toString();
      });

      // Set the parent container to use flexbox for ordering
      if (postsList) {
        postsList.style.display = 'flex';
        postsList.style.flexDirection = 'column';
      }

      // Update results count
      if (resultsCount) {
        const showing = Math.min(endIndex, filteredPosts.length);
        resultsCount.textContent = `Showing ${startIndex + 1}-${showing} of ${filteredPosts.length} ${filteredPosts.length === 1 ? 'post' : 'posts'}`;
      }

      // Show/hide pagination
      if (totalPages > 1) {
        paginationControls?.classList.remove('hidden');
        updatePaginationControls(totalPages);
      } else {
        paginationControls?.classList.add('hidden');
      }
    }

    function updatePaginationControls(totalPages) {
      // Update button states
      if (firstPage) firstPage.disabled = currentPage === 1;
      if (prevPage) prevPage.disabled = currentPage === 1;
      if (nextPage) nextPage.disabled = currentPage === totalPages;
      if (lastPage) lastPage.disabled = currentPage === totalPages;

      // Generate page numbers
      if (pageNumbers) {
        pageNumbers.innerHTML = '';

        // Show pages around current page
        const startPage = Math.max(1, currentPage - 2);
        const endPage = Math.min(totalPages, currentPage + 2);

        for (let i = startPage; i <= endPage; i++) {
          const pageButton = document.createElement('button');
          pageButton.textContent = i.toString();
          pageButton.className = `px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-50 dark:hover:bg-gray-700 ${
            i === currentPage ? 'bg-blue-500 text-white border-blue-500' : ''
          }`;
          pageButton.addEventListener('click', () => goToPage(i));
          pageNumbers.appendChild(pageButton);
        }
      }
    }

    function goToPage(page) {
      currentPage = page;
      renderResults();
    }

    function clearAllFilters() {
      if (searchInput) searchInput.value = '';
      if (categoryFilter) categoryFilter.value = '';
      if (sortBy) sortBy.value = 'date';
      currentPage = 1;
      performSearch();
    }

    // Event listeners
    searchInput?.addEventListener('input', performSearch);
    categoryFilter?.addEventListener('change', performSearch);
    sortBy?.addEventListener('change', performSearch);
    clearFilters?.addEventListener('click', clearAllFilters);
    resetSearch?.addEventListener('click', clearAllFilters);

    // Pagination event listeners
    firstPage?.addEventListener('click', () => goToPage(1));
    prevPage?.addEventListener('click', () => goToPage(Math.max(1, currentPage - 1)));
    nextPage?.addEventListener('click', () => {
      const totalPages = Math.ceil(filteredPosts.length / POSTS_PER_PAGE);
      goToPage(Math.min(totalPages, currentPage + 1));
    });
    lastPage?.addEventListener('click', () => {
      const totalPages = Math.ceil(filteredPosts.length / POSTS_PER_PAGE);
      goToPage(totalPages);
    });

    // Initial render
    performSearch();

    // Debug: log pagination state
    console.log('Initial posts:', allPosts.length, 'Posts per page:', POSTS_PER_PAGE);
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSearchableBlogList);
  } else {
    initSearchableBlogList();
  }
</script>
